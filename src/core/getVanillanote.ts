import type { Consts, Keyframes } from "../types/consts";
import type { Colors, Csses } from "../types/csses";
import type { LanguageSet } from "../types/language";
import type { Vanillanote, VanillanoteConfig } from "../types/vanillanote";
import type { Variables } from "../types/variables";
import { getRGBAFromHex } from "../utils/util";
import { LogMode, ToolPositions } from "../types/enums";
import { createVanillanote } from "./createVanillanote";
import { destroyVanillanote } from "./destroyVanillanote";

let singletonVanillanote: Vanillanote | null = null;
export const getVanillanote = (config: VanillanoteConfig): Vanillanote => {
    if (singletonVanillanote) return singletonVanillanote;

    const consts: Consts = {
        // Start possible tags
        START_POSSIBLE_TAG : ["P","H1","H2","H3","H4","H5","H6","OL","UL","BR","DIV","PRE","BLOCKQUOTE","TABLE"],
        // Unit tags for edit
        UNIT_TAG : ["P","H1","H2","H3","H4","H5","H6","LI","DIV","PRE","BLOCKQUOTE","TH","TD"],
        // Tags with a double structure
        DOUBLE_TAG : ["UL","OL"],
        // Tags that are not single
        NOT_SINGLE_TAG : ["P","H1","H2","H3","H4","H5","H6","OL","UL","LI","DIV","PRE","BLOCKQUOTE"],
        // Specially managed tags
        SPECIAL_TAG: ["A","IMG","IFRAME"],
        // Tags that are automatically converted by the browser during style conversion
        AUTO_MODIFY_TAG : ["B","U"],
        // Tags that allow text whitespace (regularly delete the tag if the text is whitespace)
        EMPTY_ABLE_TAG : ["BR","IMG","IFRAME","INPUT","I"],
        // Keys (id, className) of elements
        CLASS_NAMES : {
            template : { id : "template", className : "template", },
            textarea : { id : "textarea", className : "textarea", },
            tool : { id : "tool", className : "tool", },
            toolToggleButton : { id : "toolToggleButton", className : "button", },
            paragraphStyleSelect : { id : "paragraphStyleSelect", className : "select", },
            paragraphStyleSelectBox : { id : "paragraphStyleSelectBox", className : "select_box_a", },
            styleNomal : { id : "styleNomal", className : "select_list", },
            styleHeader1 : { id : "styleHeader1", className : "select_list", },
            styleHeader2 : { id : "styleHeader2", className : "select_list", },
            styleHeader3 : { id : "styleHeader3", className : "select_list", },
            styleHeader4 : { id : "styleHeader4", className : "select_list", },
            styleHeader5 : { id : "styleHeader5", className : "select_list", },
            styleHeader6 : { id : "styleHeader6", className : "select_list", },
            boldButton : { id : "boldButton", className : "button", },
            underlineButton : { id : "underlineButton", className : "button", },
            italicButton : { id : "italicButton", className : "button", },
            ulButton : { id : "ulButton", className : "button", },
            olButton : { id : "olButton", className : "button", },
            textAlignSelect : { id : "textAlignSelect", className : "button", },
            textAlignSelectBox : { id : "textAlignSelectBox", className : "select_box_b", },
            textAlignLeft : { id : "textAlignLeft", className : "select_list_button", },
            textAlignCenter : { id : "textAlignCenter", className : "select_list_button", },
            textAlignRight : { id : "textAlignRight", className : "select_list_button", },
            attLinkButton : { id : "attLinkButton", className : "button", },
            attFileButton : { id : "attFileButton", className : "button", },
            attImageButton : { id : "attImageButton", className : "button", },
            attVideoButton : { id : "attVideoButton", className : "button", },
            fontSizeInputBox : { id : "fontSizeInputBox", className : "small_input_box", },
            fontSizeInput : { id : "fontSizeInput", className : "small_input", },
            letterSpacingInputBox : { id : "letterSpacingInputBox", className : "small_input_box", },
            letterSpacingInput : { id : "letterSpacingInput", className : "small_input", },
            lineHeightInputBox : { id : "lineHeightInputBox", className : "small_input_box", },
            lineHeightInput : { id : "lineHeightInput", className : "small_input", },
            fontFamilySelect : { id : "fontFamilySelect", className : "select", },
            fontFamilySelectBox : { id : "fontFamilySelectBox", className : "select_box_a", },
            fontFamily : { id : "fontFamily_", className : "select_list", },
            colorTextSelect : { id : "colorTextSelect", className : "button", },
            colorTextSelectBox : { id : "colorTextSelectBox", className : "select_box_c", },
            colorText0 : { id : "colorText0", className : "color_button", },
            colorText1 : { id : "colorText1", className : "color_button", },
            colorText2 : { id : "colorText2", className : "color_button", },
            colorText3 : { id : "colorText3", className : "color_button", },
            colorText4 : { id : "colorText4", className : "color_button", },
            colorText5 : { id : "colorText5", className : "color_button", },
            colorText6 : { id : "colorText6", className : "color_button", },
            colorText7 : { id : "colorText7", className : "color_button", },
            colorTextRInput : { id : "colorTextRInput", className : "color_input", },
            colorTextRExplain : { id : "colorTextRExplain", className : "color_explain", },
            colorTextGInput : { id : "colorTextGInput", className : "color_input", },
            colorTextGExplain : { id : "colorTextGExplain", className : "color_explain", },
            colorTextBInput : { id : "colorTextBInput", className : "color_input", },
            colorTextBExplain : { id : "colorTextBExplain", className : "color_explain", },
            colorTextOpacityInput : { id : "colorTextOpacityInput", className : "color_input", },
            colorTextOpacityExplain : { id : "colorTextOpacityExplain", className : "color_explain", },
            colorBackSelect : { id : "colorBackSelect", className : "button", },
            colorBackSelectBox : { id : "colorTextSelectBox", className : "select_box_c", },
            colorBack0 : { id : "colorBack0", className : "color_button", },
            colorBack1 : { id : "colorBack1", className : "color_button", },
            colorBack2 : { id : "colorBack2", className : "color_button", },
            colorBack3 : { id : "colorBack3", className : "color_button", },
            colorBack4 : { id : "colorBack4", className : "color_button", },
            colorBack5 : { id : "colorBack5", className : "color_button", },
            colorBack6 : { id : "colorBack6", className : "color_button", },
            colorBack7 : { id : "colorBack7", className : "color_button", },
            colorBackRInput : { id : "colorBackRInput", className : "color_input", },
            colorBackRExplain : { id : "colorBackRExplain", className : "color_explain", },
            colorBackGInput : { id : "colorBackGInput", className : "color_input", },
            colorBackGExplain : { id : "colorBackGExplain", className : "color_explain", },
            colorBackBInput : { id : "colorBackBInput", className : "color_input", },
            colorBackBExplain : { id : "colorBackBExplain", className : "color_explain", },
            colorBackOpacityInput : { id : "colorBackOpacityInput", className : "color_input", },
            colorBackOpacityExplain : { id : "colorBackOpacityExplain", className : "color_explain", },
            formatClearButton : { id : "formatClearButton", className : "button", },
            undoButton : { id : "undoButton", className : "button", },
            redoButton : { id : "redoButton", className : "button", },
            helpButton : { id : "helpButton", className : "button", },
            modalBack : { id : "modalBack", className : "modal_back", },
            attLinkModal : { id : "attLinkModal", className : "modal_body", },
            attLinkHeader : { id : "attLinkHeader", className : "modal_header", },
            attLinkFooter : { id : "attLinkFooter", className : "modal_footer", },
            attLinkExplain1 : { id : "attLinkExplain1", className : "modal_explain", },
            attLinkText : { id : "attLinkText", className : "modal_input", },
            attLinkExplain2 : { id : "attLinkExplain2", className : "modal_explain", },
            attLinkHref : { id : "attLinkHref", className : "modal_input", },
            attLinkIsBlankLabel : { id : "attLinkIsBlankLabel", className : "att_link_is_blank_label", },
            attLinkIsBlankCheckbox : { id : "attLinkIsBlankCheckbox", className : "input_checkbox", },
            attLinkValidCheckText : { id : "attLinkValidChecktext", className : "att_valid_checktext", },
            attLinkValidCheckbox : { id : "attLinkValidCheckbox", className : "input_checkbox", },
            attLinkInsertButton : { id : "attLinkInsertButton", className : "normal_button", },
            attLinkTooltip : { id : "attLinkTooltip", className : "tooltip", },
            attLinkTooltipHref : { id : "attLinkTooltipHref", className : "att_link_tooltip_href", },
            attLinkTooltipEditButton : { id : "attLinkTooltipEditButton", className : "tooltip_button", },
            attLinkTooltipUnlinkButton : { id : "attLinkTooltipUnlinkButton", className : "tooltip_button", },
            attFileModal : { id : "attFileModal", className : "modal_body", },
            attFileHeader : { id : "attFileHeader", className : "modal_header", },
            attFilelayout : { id : "attFilelayout", className : "modal_layout", },
            attFileExplain1 : { id : "attFileExplain1", className : "modal_explain", },
            attFileUploadButton : { id : "attFileUploadButton", className : "normal_button", },
            attFileUploadDiv : { id : "attFileUploadDiv", className : "drag_drop_div", },
            attFileUpload : { id : "attFileUpload", className : "modal_input_file", },
            attFileInsertButton : { id : "attFileInsertButton", className : "normal_button", },
            attFileFooter : { id : "attFileFooter", className : "modal_footer", },
            attImageModal : { id : "attImageModal", className : "modal_body", },
            attImageHeader : { id : "attImageHeader", className : "modal_header", },
            attImageExplain1 : { id : "attImageExplain1", className : "modal_explain", },
            attImageExplain2 : { id : "attImageExplain2", className : "modal_explain", },
            attImageUploadButtonAndView : { id : "attImageUploadButtonAndView", className : "image_view_div", },
            attImageViewPreButtion : { id : "attImageViewPreButtion", className : "opacity_button", },
            attImageViewNextButtion : { id : "attImageViewNextButtion", className : "opacity_button", },
            attImageUpload : { id : "attImageUpload", className : "modal_input_file", },
            attImageURL : { id : "attImageURL", className : "modal_input", },
            attImageInsertButton : { id : "attImageInsertButton", className : "normal_button", },
            attImageFooter : { id : "attImageFooter", className : "modal_footer", },
            attVideoModal : { id : "attVideoModal", className : "modal_body", },
            attVideoHeader : { id : "attVideoHeader", className : "modal_header", },
            attVideoExplain1 : { id : "attVideoExplain1",className : "modal_explain", },
            attVideoEmbedId : { id : "attVideoEmbedId", className : "modal_input", },
            attVideoExplain2 : { id : "attVideoExplain2", className : "modal_explain", },
            attVideoWidth : { id : "attVideoWidth", className : "modal_small_input", },
            attVideoHeight : { id : "attVideoHeight", className : "modal_small_input", },
            attVideoValidCheckText : { id : "attVideoValidCheckText", className : "att_valid_checktext", },
            attVideoValidCheckbox : { id : "attVideoValidCheckbox", className : "input_checkbox", },
            attVideoInsertButton : { id : "attVideoInsertButton", className : "normal_button", },
            attVideoFooter : { id : "attVideoFooter", className : "modal_footer", },
            attImageAndVideoTooltip : { id : "attImageAndVideoTooltip", className : "tooltip", },
            attImageAndVideoTooltipWidthInput : { id : "attImageAndVideoTooltipWidthInput", className : "smallpx_input", },
            attImageAndVideoTooltipFloatRadioNone : { id : "attImageAndVideoTooltipFloatRadioNone", className : "input_radio", },
            attImageAndVideoTooltipFloatRadioLeft : { id : "attImageAndVideoTooltipFloatRadioLeft", className : "input_radio", },
            attImageAndVideoTooltipFloatRadioRight : { id : "attImageAndVideoTooltipFloatRadioRight", className : "input_radio", },
            attImageAndVideoTooltipShapeRadioSquare : { id : "attImageAndVideoTooltipShapeRadioSquare", className : "input_radio", },
            attImageAndVideoTooltipShapeRadioRadius : { id : "attImageAndVideoTooltipShapeRadioRadius", className : "input_radio", },
            attImageAndVideoTooltipShapeRadioCircle : { id : "attImageAndVideoTooltipShapeRadioCircle", className : "input_radio", },
            helpModal : { id : "helpModal", className : "modal_body", },
            helpMain : { id : "helpMain", className : "help_main", },
            helpHeader : { id : "helpHeader", className : "modal_header", },
            helpFooter : { id : "helpFooter", className : "modal_footer", },
            placeholder : { id : "placeholder", className : "placeholder", },
        },
    };

    const keyframes: Keyframes = {
        "@keyframes vanillanote-modal-input" : "@keyframes vanillanote-modal-input {0%{width: 30%;}100%{width: 80%;}}\n",
        "@keyframes vanillanote-modal-small-input" : "@keyframes vanillanote-modal-small-input {0%{width: 0%;}100%{width: 20%;}}\n",
    };

    if(!config) config = getVanillanoteConfig();
    const csses: Csses = config.csses;
    const colors: Colors = config.colors;
    const variables: Variables = config.variables;
    const languageSet: LanguageSet = config.languageSet;
    
    singletonVanillanote = {
        consts : consts,
        csses : csses,
        colors : colors,
        keyframes : keyframes,
        variables : variables,
        languageSet : languageSet,
        documentEvents : { selectionchange: null, keydown: null, resize: null, resizeViewport: null },
        vanillanoteElements : {},
        get(noteId: string) {return null},
        beforeAlert(message: string) {return true},
        create(element: HTMLElement) {
            createVanillanote(singletonVanillanote!, element);
        },
        destroy(element: HTMLElement) {
            destroyVanillanote(singletonVanillanote!, element);
        },
    };

    return singletonVanillanote;
}

export const getVanillanoteConfig =(): VanillanoteConfig => {
    const variables: Variables = {
        noteName : "vanillanote",
        isCreated : false,
        logMode : LogMode.debug, 	//DEBUG : Total log, INFO : infomation, ERROR : only error(default)
        observerOptions : {characterData: true, childList: true, subtree: true},
        useMobileActiveMode : true,
        // lastActiveNote : 0,
        // recodeNotes : [],
        // recodeContings : [],
        // recodeLimit : [],
        lastScreenHeight : null,
        isIOS : false,
        mobileKeyboardExceptHeight : null,
        isSelectionProgress : false,
        preventChangeScroll : 0,
        resizeInterval : 50,
        inputInterval : 50,
        loadInterval : 100,
        canEvents : true,
        toolPositions : ToolPositions.top,
        toolDefaultLines : 1,
        textareaOriginWidths : "100%",
        textareaOriginHeights : "500px",
        textareaMaxWidth : "100%",
        textareaMaxHeight : "900px",
        textareaHeightIsModify: false,
        placeholderIsVisible : false,
        placeholderAddTop : 0,
        placeholderAddLeft : 0,
        placeholderWidth : "",
        //editSelections: null,
        //editRanges : null,
        //startOffsets : null,
        //endOffsets : null,
        //editStartNodes : null,
        //editEndNodes : null,
        //editStartElements : null,
        //editEndElements : null,
        //editStartUnitElements : null,
        //editEndUnitElements : null,
        //editDragUnitElements : [],
        //setEditStyleTagToggle : 0,
        // toolToggles : [],
        // boldToggles : [],
        // underlineToggles : [],
        // italicToggles : [],
        // ulToggles : [],
        // olToggles : [],
        // fontSizes : [],
        // letterSpacings : [],
        // lineHeights : [],
        // fontFamilies : [],
        // // colorTextRs : [],
        // colorTextGs : [],
        // colorTextBs : [],
        // colorTextOs : [],
        // colorTextRGBs : [],
        // colorTextOpacitys : [],
        // colorBackRs : [],
        // colorBackGs : [],
        // colorBackBs : [],
        // colorBackOs : [],
        // colorBackRGBs : [],
        // colorBackOpacitys : [],
        // openedModals : [],
        attFilePreventTypes : [],
        attFileAcceptTypes : [],
        attFileMaxSizes : 50 * 1024 * 1024,
        // attTempFiles : [],
        // attFiles : [],
        attImagePreventTypes : [],
        attImageAcceptTypes : [],
        attImageMaxSizes : 50 * 1024 * 1024,
        // attTempImages : [],
        // attImages : [],
        sizeRates : 0.7,	// 1 ~ 10
        defaultTextareaFontSize: "16px",
        defaultTextareaLineHeight: "16px",
        defaultTextareaFontFamily: "Georgia",
        defaultToolFontFamily: "Georgia",
        language : "ENG",
    };
    const colors: Colors = {
        color1 : "#333333", //filled
        color2 : "#ffffff", //empty
        color3 : "#f8f8f8", //toolbar
        color4 : "#f4f4f4", //button
        color5 : "#cbcbcb", //active
        color6 : "#cfcfcf", //border
        color7 : "#6f6f6f", //box-shadow
        color8 : "#609966", //correct
        color9 : "#ea5455", //notice
        color10 : "#333333", //modal text
        color11 : "#666666", //a tag color
        color12 : "#333333", //color 0 text 
        color13 : "#ffffff", //color 0 text 
        color14 : "#ff7f7f", //color 1
        color15 : "#ffad66", //color 2
        color16 : "#ffff66", //color 3
        color17 : "#99ff99", //color 4
        color18 : "#99ccff", //color 5
        color19 : "#6699cc", //color 6
        color20 : "#cc99cc", //color 7
    };
    const languageSet: LanguageSet = {
        ENG : {
            textareaTooltip : "HELLO VANILLANOTE!",
            thanks : "Thank you!",
            styleTooltip : "Please let me know your style.",
            boldTooltip : "This is a bold button.",
            underlineTooltip : "This is a under line button.",
            italicTooltip : "This is a italic button.",
            ulTooltip : "This is a ul button.",
            olTooltip : "This is a ol button.",
            textAlignTooltip : "Select your text align.",
            attLinkTooltip : "This is a attach link button.",
            attFileTooltip : "This is a attach file button.",
            attImageTooltip : "This is a attach image button.",
            attVideoTooltip : "This is a attach video button.",
            fontSizeTooltip : "Please let me know the font size.",
            letterSpacingTooltip : "Please let me know the letter spacing.",
            lineHeightTooltip : "Please let me know the line height.",
            fontFamilyTooltip : "Please let me know your font family.",
            colorTextTooltip : "This is a text color button.",
            colorBackTooltip : "This is a background color button.",
            formatClearButtonTooltip : "clear your format.",
            undoTooltip : "undo",
            redoTooltip : "redo",
            helpTooltip : "What can i help you.",
            attLinkModalTitle : "INSERT LINK",
            attLinkInTextExplain : "Text to display",
            attLinkInLinkExplain : "To what URL should this link go?",
            attLinkIsOpenExplain : "   Open in new window",
            attLinkInTextTooltip : "Please let me know the text.",
            attLinkInLinkTooltip : "Please let me know the link.",
            attLinkIsOpenTooltip : "Does it open in a new window?",
            attFileModalTitle : "INSERT FILE",
            attFileExplain1 : "Please upload your file",
            attFileUploadButton : "file upload",
            attFileUploadDiv : "drop your files!",
            attFileListTooltip : "remove",
            attImageModalTitle : "INSERT IMAGE",
            attImageUploadButtonAndView : "Image upload",
            attImageExplain1 : "Please upload your image",
            attImageExplain2 : "URL",
            attImageURLTooltip : "Please let me know the URL.",
            attOverSize : "The file exceeds the allowed size.",
            attPreventType : "The file is not of an allowed type.",
            attVideoModalTitle : "INSERT YOUTUBE",
            attVideoExplain1 : "Youtube Embed Id",
            attVideoExplain2 : "Check your size",
            attVideoEmbedIdTooltip : "Please let me know the embed id.",
            attVideoWidthTooltip : "Please let me know the width percent.",
            attVideoHeightTooltip : "Please let me know the height pixel.",
            attImageAndVideoTooltipWidthInput : "width",
            attImageAndVideoTooltipFloatRadio : "float",
            attImageAndVideoTooltipShapeRadio : "Shape",
            helpModalTitle : "Help",
            helpContent : [
                {"ctrl + z" : "Undo the last command"},
                {"ctrl + y" : "Redo the last command"},
                {"ctrl + b" : "Set a bold style"},
                {"ctrl + u" : "Set a underline style"},
                {"ctrl + i" : "Set a italic style"},
                {"enter" : "Add new line as new block"},
                {"shift + enter" : "Add new line in now block"},
                {"etc1" : "On mobile, you can only change the style after dragging."},
                {"etc2" : "Uploading a video requires using the YouTube embed id."},
            ],
        },
        KOR : {
            textareaTooltip : "",
            thanks : "감사합니다!",
            styleTooltip : "문단 스타일",
            boldTooltip : "굵게",
            underlineTooltip : "밑줄",
            italicTooltip : "기울게",
            ulTooltip : "목록",
            olTooltip : "번호 목록",
            textAlignTooltip : "수평 정렬",
            attLinkTooltip : "링크 첨부",
            attFileTooltip : "파일 첨부",
            attImageTooltip : "이미지 첨부",
            attVideoTooltip : "동영상 첨부",
            fontSizeTooltip : "글자 크기",
            letterSpacingTooltip : "자간",
            lineHeightTooltip : "수직 넓기",
            fontFamilyTooltip : "글씨체",
            colorTextTooltip : "글자 색상",
            colorBackTooltip : "배경 색상",
            formatClearButtonTooltip : "효과 제거",
            undoTooltip : "실행 취소",
            redoTooltip : "다시 실행",
            helpTooltip : "도움말",
            attLinkModalTitle : "링크 삽입",
            attLinkInTextExplain : "보여질 문장을 넣어주세요.",
            attLinkInLinkExplain : "이동할 링크를 넣어주세요.",
            attLinkIsOpenExplain : "   새창열기?",
            attLinkInTextTooltip : "문장을 넣어주세요.",
            attLinkInLinkTooltip : "링크를 넣어주세요.",
            attLinkIsOpenTooltip : "클릭 시 새로운 창에서 열립니다.",
            attFileModalTitle : "파일 삽입",
            attFileExplain1 : "파일을 업로드 해주세요.",
            attFileUploadButton : "파일 선택",
            attFileUploadDiv : "파일을 떨궈 주세요.",
            attFileListTooltip : "삭제",
            attImageModalTitle : "이미지 삽입",
            attImageUploadButtonAndView : "이미지 선택",
            attImageExplain1 : "이미지를 업로드 해주세요.",
            attImageExplain2 : "URL",
            attImageURLTooltip : "URL을 지정 해주세요.",
            attOverSize : "파일은 허용 용량을 초과했습니다.",
            attPreventType : "파일은 허용된 유형이 아닙니다.",
            attVideoModalTitle : "유튜브 삽입",
            attVideoExplain1 : "Youtube Embed Id",
            attVideoExplain2 : "프레임 크기",
            attVideoEmbedIdTooltip : "유튜브 embed id를 알려주세요.",
            attVideoWidthTooltip : "%",
            attVideoHeightTooltip : "PX",
            attImageAndVideoTooltipWidthInput : "가로",
            attImageAndVideoTooltipFloatRadio : "띄우기",
            attImageAndVideoTooltipShapeRadio : "모양",
            helpModalTitle : "질문",
            helpContent : [
                {"ctrl + z" : "실행취소"},
                {"ctrl + y" : "다시실행"},
                {"ctrl + b" : "굵게"},
                {"ctrl + u" : "밑줄"},
                {"ctrl + i" : "기울게"},
                {"enter" : "새로운 블럭에 새로운 라인은 추가합니다."},
                {"shift + enter" : "기존 블럭에 새로운 라인을 추가합니다."},
                {"etc1" : "모바일에서는 드래그 후 스타일 적용만 가능합니다."},
                {"etc2" : "동영상 업로드는 YouTube embed id를 활용해야 합니다."},
            ],
        },
    };
    const csses: Csses = getCssesWithVanillanoteConfig(variables, colors);
    const vanillanoteConfig: VanillanoteConfig = {
        csses: csses,
        colors: colors,
        languageSet: languageSet,
        variables: variables,
        beforeAlert: function(message: string) {return true;}
    };
    return vanillanoteConfig;
}

export const getCssesWithVanillanoteConfig =(_variables: Variables, _colors: Colors): Csses => {
    if(!_variables) throw new Error("Please insert variables object in VanillanoteConfig.");
    if(!_colors) throw new Error("Please insert colors object in VanillanoteConfig.");
    const variables: Variables = _variables;
    const colors: Colors = _colors;
    
    const csses: Csses = {
        "template h1" : {
			"display" : "block",
			"font-size" : "2em",
			"line-height" : "1.2em",
			"font-weight" : "bold",
			"margin" : "1em 0",
			"padding" : "0 10px",
        },
        "template h2" : {
			"display" : "block",
			"font-size" : "1.8em",
			"line-height" : "1.2em",
			"font-weight" : "bold",
			"margin" : "1em 0",
			"padding" : "0 10px",
        },
        "template h3" : {
			"display" : "block",
			"font-size" : "1.6em",
			"line-height" : "1.2em",
			"font-weight" : "bold",
			"margin-top" : "1em",
			"margin-bottom" : "1em",
			"padding" : "0 10px",
        },
        "template h4" : {
			"display" : "block",
			"font-size" : "1.4em",
			"line-height" : "1.2em",
			"font-weight" : "bold",
			"margin" : "1em 0",
			"padding" : "0 10px",
        },
        "template h5" : {
			"display" : "block",
			"font-size" : "1.2em",
			"line-height" : "1.2em",
			"font-weight" : "bold",
			"margin" : "1em 0",
			"padding" : "0 10px",
        },
        "template h6" : {
			"display" : "block",
			"font-size" : "1em",
			"line-height" : "1.2em",
			"font-weight" : "bold",
			"margin" : "1em 0",
			"padding" : "0 10px",
        },
        "textarea ul" : {
			"display" : "block",
			"list-style-type" : "disc",
			"padding-left" : "40px",
			"margin" : "1em 0",
        },
        "textarea ol" : {
			"display" : "block",
			"list-style-type" : "decimal",
			"padding-left" : "40px",
			"margin" : "1em 0",
        },
        "textarea li" : {
			"display" : "list-item",
			"margin-top" : "0.5em",
			"margin-bottom" : "0.5em",
			"padding" : "0 10px",
        },
        "textarea p" : {
			"display" : "block",
			"margin-top" : "1em",
			"margin-bottom" : "1em",
			"padding" : "0 10px",
        },
        "textarea div" : {
			"display" : "block",
			"margin-top" : "1em",
			"margin-bottom" : "1em",
			"padding" : "0 10px",
        },
        "textarea span" : {
			"display" : "inline",
        },
        "textarea a" : {
			"display" : "inline",
			"color" : colors.color11,
			"text-decoration" : "underline",
        },
        "template" : {
			"width" : "100%",
			"height" : "100%",
			"position" : "relative",
        },
        "textarea" : {
			"width" : variables.textareaOriginWidths,
			"height" : variables.textareaOriginHeights,
			"display" : "block",
			"margin" : "0 auto",
			"outline" : "none",
			"cursor" : "text",
			"text-align" : "left",
			"overflow" : "auto",
			"word-wrap" : "break-word",
			"resize": variables.textareaHeightIsModify === true ? "vertical" : "none",
			"max-width" : variables.textareaMaxWidth,
			"max-height" : variables.textareaMaxHeight,
			"box-shadow" : "0 0.5px 1px 0.5px " + colors.color7,
			"background-color" : colors.color2,
			"font-size" : variables.defaultTextareaFontSize,
			"line-height" : variables.defaultTextareaLineHeight,
			"font-family" : variables.defaultTextareaFontFamily,
			"color" : colors.color12,
			"transition": "height 0.5s",
        },
        "tool" : {
			"width" : variables.textareaOriginWidths,
			"height" : (variables.toolDefaultLines * (variables.sizeRates * 50)) + "px",
			"padding" : "2px 0",
			"max-width" : variables.textareaMaxWidth,
			"display" : "block",
			"line-height" : (variables.sizeRates * 50) + "px",
			"margin" : "0 auto",
			"text-align" : "left",
			"vertical-align" : "middle",
			"box-shadow" : "0.25px 0.25px 1px 0.5px " + colors.color7,
			"font-size" : (variables.sizeRates * 16) + "px",
			"background-color" : colors.color3,
			"font-family" : variables.defaultToolFontFamily,
        },
        "icon" : {
			"font-size" : "1.3em",
			"-webkit-user-select" : "none",
			"-moz-user-select" : "none",
			"-ms-user-select" : "none",
			"user-select" : "none",
			"color" : colors.color1,
        },
        "button" : {
			"width" : (variables.sizeRates * 50) + "px",
			"height" : (variables.sizeRates * 45) + "px",
			"float" : "left",
			"display" : "inline-block",
			"cursor" : "pointer",
			"text-align" : "center",
			"margin" : "2px 2px",
			"border-radius" : "5px",
			"box-shadow" : "0.25px 0.25px 2px 0.25px " + colors.color7,
			"background-color" : colors.color4,
			"font-family" : variables.defaultToolFontFamily,
			"position" : "relative",
        },
        "select" : {
			"width" : (variables.sizeRates * 150) + "px",
			"height" : (variables.sizeRates * 45) + "px",
			"background-color" : colors.color4,
			"float" : "left",
			"display" : "inline-block",
			"cursor" : "pointer",
			"text-align" : "center",
			"margin" : "2px 2px",
			"border-radius" : "5px",
			"box-shadow" : "0.25px 0.25px 2px 0.25px " + colors.color7,
			"color" : colors.color1,
			"position" : "relative",
        },
        "select_box_a" : {
			"min-width" : (variables.sizeRates * 150) + "px",
			"background-color" : colors.color4,
			"display" : "none",
			"float" : "left",
			"position" : "absolute",
			"cursor" : "pointer",
			"border-radius" : "5px",
			"box-shadow" : "0.25px 0.25px 0.1em " + colors.color7, 
			"opacity" : "0.85",
			"z-index" : "200",
        },
        "select_box_b" : {
			"width" : (variables.sizeRates * 50) + "px",
			"display" : " none",
			"float" : "left",
			"position" : "absolute",
			"cursor" : "pointer",
			"border-radius" : "5px",
			"z-index" : "200",
        },
        "select_box_c" : {
			"width" : (variables.sizeRates * 220 + 30) + "px",
			"display" : "none",
			"padding" : "0 " + (variables.sizeRates * 10) + "px",
			"float" : "left",
			"position" : "absolute",
			"border-radius" : "5px",
			"box-shadow" : "0.25px 0.25px 0.1em " + colors.color7,
			"background-color" : colors.color4,
			"opacity" : "0.95",
			"cursor" : "text",
			"text-align" : "left",
			"z-index" : "200",
        },
        "select_list" : {
			"display" : "block",
			"height" : (variables.sizeRates * 45) + "px",
			"margin" : "0 !important",
			"line-height" : (variables.sizeRates * 45) + "px !important",
			"padding" : "3px 5px", 
			"cursor" : "pointer",
			"text-align" : "left",
			"overflow" : "hidden",
        },
        "select_list_button" : {
			"width" : (variables.sizeRates * 50) + "px",
			"height" : (variables.sizeRates * 45) + "px",
			"background-color" : colors.color4,
			"display" : "inline-block",
			"cursor" : "pointer",
			"border-radius" : "5px",
			"box-shadow" : "0px 0.25px 0.1em " + colors.color7,
        },
        "small_input_box" : {
			"width" : (variables.sizeRates * 120) + "px",
			"height" : (variables.sizeRates * 45) + "px",
			"background-color" : colors.color4,
			"float" : "left",
			"overflow" : "hidden",
			"cursor" : "pointer",
			"display" : "inline-block",
			"text-align" : "center",
			"margin" : "2px 2px",
			"border-radius" : "5px",
			"box-shadow" : "0.25px 0.25px 2px 0.25px " + colors.color7,
        },
        "small_input" : {
			"width" : "30%",
			"background-color" : "rgba(0,0,0,0)",
			"color" : colors.color1,
			"border" : "none",
			"border-radius" : "0",
			"text-align" : "right",
			"display" : "inline-block",
			"position" : "relative",
			"top" : "-4px",
			"margin-left" : "5px",
			"font-family" : variables.defaultToolFontFamily,
			"cursor" : "text",
			"font-size" : "0.8em!important",
        },
        "small_input:focus" : {
			"outline" : "none",
        },
        "small_input::-webkit-inner-spin-button" : {
			"-webkit-appearance" : "none",
			"margin" : "0",
        },
        "small_input::-webkit-outer-spin-button" : {
			"-webkit-appearance" : "none",
			"margin" : "0",
        },
        "small_input[type=number]" : {
			"-moz-appearance" : "textfield",
        },
        "normal_button" : {
			"min-width" : (variables.sizeRates * 50) + "px",
			"height" : (variables.sizeRates * 45) + "px",
			"font-size" : "0.8em",
			"padding" : "0 15px",
			"display" : "inline-block",
			"cursor" : "pointer",
			"text-align" : "center",
			"border-radius" : "5px",
			"border" : "none",
			"box-shadow" : "0.25px 0.25px 2px 0.25px " + colors.color7,
			"color" : colors.color1,
			"font-family" : variables.defaultToolFontFamily,
			"background-color" : colors.color4,
        },
        "opacity_button" : {
			"min-width" : (variables.sizeRates * 40) + "px",
			"height" : (variables.sizeRates * 40) + "px",
			"font-size" : "0.7em",
			"display" : "inline-block",
			"cursor" : "pointer",
			"text-align" : "center",
			"border-radius" : "5px",
			"border" : "none",
			"color" : colors.color1,
			"font-family" : variables.defaultToolFontFamily,
			"background-color" : getRGBAFromHex(colors.color4, 0.5),
        },
        "small_text_box" : {
			"display" : "inline-block",
			"padding" : "0 10px",
			"font-size" : "0.8em",
			"color" : colors.color1,
        },
        "modal_back" : {
			"background-color" : "rgba(0,0,0,0.5)",
			"display" : "none",
			"position" : "absolute",
			"z-index" : "300",
			"font-family" : variables.defaultToolFontFamily,
			"color" : colors.color1,
			"font-size" : (variables.sizeRates * 16) + "px",
        },
        "modal_body" : {
			"width" : "80%",
			"margin" : "0 auto",
			"display" : "none",
			"text-align" : "left",
			"border" : "solid 1px " + colors.color6,
			"border-radius" : "20px",
			"background-color" : colors.color2,
        },
        "modal_header" : {
			"text-align" : "left",
			"padding-top" : (variables.sizeRates * 20) + "px",
			"padding-right" : (variables.sizeRates * 10) + "px",
			"padding-bottom" : (variables.sizeRates * 20) + "px",
			"padding-left" : (variables.sizeRates * 20) + "px",
			"margin-bottom" : (variables.sizeRates * 10) + "px",
			"background-color" : colors.color4,
			"border-radius" : "20px 20px 0 0",
			"font-weight" : "bold",
			"font-size" : "1.05em",
        },
        "modal_footer" : {
			"text-align" : "right",
			"margin-top" : (variables.sizeRates * 10) + "px",
			"padding-top" : (variables.sizeRates * 10) + "px",
			"padding-right" : (variables.sizeRates * 10) + "px",
			"padding-bottom" : (variables.sizeRates * 10) + "px",
			"padding-left" : (variables.sizeRates * 10) + "px",
			"border-top" : "1px solid " + colors.color6,
        },
        "modal_explain" : {
			"font-size" : "0.95em",
			"text-align" : "left",
			"padding-top" : (variables.sizeRates * 20) + "px",
			"padding-bottom" : (variables.sizeRates * 10) + "px",
			"padding-left" : (variables.sizeRates * 20) + "px",
			"display" : "inline-block",
			"color": colors.color10,
			"font-family" : variables.defaultToolFontFamily,
        },
        "modal_input" : {
			"display" : "block",
			"width" : "80%",
			"background-color" : "rgba(0,0,0,0)",
			"font-family" : variables.defaultToolFontFamily,
		    "color": colors.color10,
			"border" : "none",
			"border-radius" : "0",
			"border-bottom" : "1px solid " + colors.color6,
			"margin-bottom" : (variables.sizeRates * 10) + "px",
			"margin-left" : (variables.sizeRates * 20) + "px",
			"font-size" : "1.05em",
			"animation" : "vanillanote-modal-input 0.7s forwards"
        },
        "modal_input:focus" : {
			"outline" : "none",
        },
        "modal_input[readonly]" : {
			"background-color": "rgba(0,0,0,0.1)",
        },
        "modal_small_input" : {
			"display" : "inline-block",
			"width" : "20%",
			"background-color" : "rgba(0,0,0,0)",
			"font-family" : variables.defaultToolFontFamily,
		    "color": colors.color10,
			"border" : "none",
		    "border-radius" : "0",
			"border-bottom" : "1px solid " + colors.color6,
			"margin-bottom" : (variables.sizeRates * 10) + "px",
			"margin-left" : (variables.sizeRates * 20) + "px",
			"font-size" : "1.05em",
			"animation" : "vanillanote-modal-small-input 1s forwards"
        },
        "modal_small_input:focus" : {
			"outline" : "none",
        },
        "modal_small_input::-webkit-inner-spin-button" : {
			"appearance" : "none",
			"-moz-appearance" : "none",
			"-webkit-appearance" : "none",
        },
        "modal_small_input::-webkit-outer-spin-button" : {
			"-webkit-appearance" : "none",
			"margin" : "0",
        },
        "modal_small_input[type=number]" : {
			"-moz-appearance" : "textfield",
        },
        "modal_small_input[readonly]" : {
			"background-color": colors.color4,
        },
        "modal_input_file" : {
			"display" : "none!important",
        },
        "att_valid_checktext" : {
			"padding-right" : "10px",
			"font-size" : "0.7em",
        },
        "att_link_is_blank_label" : {
			"font-size" : "0.95em",
			"text-align" : "left",
			"display" : "inline-block",
			"height" : "25px",
			"cursor" : "pointer",
			"margin-top" : (variables.sizeRates * 10) + "px",
			"margin-bottom" : (variables.sizeRates * 10) + "px",
			"margin-left" : (variables.sizeRates * 15) + "px",
			"color": colors.color10,
        },
        "input_checkbox" : {
			"cursor" : "pointer",
			"display": "inline-block",
		    "width" : "12px",
		    "height" : "12px",
		    "border-radius" : "3px",
		    "border" : "solid "+colors.color6,
		    "border-width" : "1px 2px 2px 1px",
		    "transform" : "rotate(0deg)",
		    "transition": "transform 0.3s",
        },
        "input_checkbox:focus" : {
			"outline" : "none!important",
        },
        "input_checkbox[disabled]" : {
			"background-color": colors.color4,
        },
        "smallpx_input" : {
			"width" : "40px",
			"background-color" : "rgba(0,0,0,0)",
			"color" : colors.color1,
			"border" : "none",
			"border-radius" : "5px",
			"text-align" : "right",
			"font-size" : "0.9em!important",
			"display" : "inline-block",
			"margin-left" : "5px",
			"font-family" : variables.defaultToolFontFamily,
        },
        "smallpx_input:focus" : {
			"outline" : "none",
        },
        "smallpx_input::-webkit-inner-spin-button" : {
			"appearance" : "none",
			"-moz-appearance" : "none",
			"-webkit-appearance" : "none",
        },
        "input_radio" : {
			"cursor" : "pointer",
			"display": "inline-block",
		    "width" : "12px",
		    "height" : "12px",
		    "border-radius" : "50%",
		    "border" : "solid 1px "+colors.color6,
		    "transition": "transform 0.4s, background-color 0.6s;",
        },
        "input_radio:focus" : {
			"outline" : "none!important",
        },
        "input_radio:checked" : {
		    "background-color": colors.color5,
		    "transform": "rotateY( 180deg )",
		    "transition": "transform 0.3s, background-color 0.5s;",
        },
        "input_radio[disabled]" : {
			"background-color": colors.color4,
        },
        "drag_drop_div" : {
			"width" : "100%",
			"height" : variables.sizeRates * 120 + "px",
			"display" : "inline-block",
			"margin-top" : "10px",
			"border-radius" : "5px",
			"background-color" : colors.color4,
			"border" : "solid 1px"+colors.color6,
			"line-height" : variables.sizeRates * 130 + "px",
			"font-size" : "0.8em",
			"color" : getRGBAFromHex(colors.color1, 0.8),
			"overflow-y" : "scroll",
			"cursor" : "pointer",
        },
        "image_view_div" : {
			"width" : "80%",
			"height" : variables.sizeRates * 120 + "px",
			"display" : "inline-block",
			"margin-top" : "10px",
			"border-radius" : "5px",
			"background-color" : colors.color4,
			"border" : "solid 1px"+colors.color6,
			"line-height" : variables.sizeRates * 130 + "px",
			"font-size" : "0.8em",
			"color" : getRGBAFromHex(colors.color1, 0.8),
			"cursor" : "pointer",
			"overflow" : "hidden",
			"white-space" : "nowrap",
			"scroll-behavior" : "smooth",
        },
        "color_button" : {
			"width" : (variables.sizeRates * 50) * 0.5 + "px",
			"height" : (variables.sizeRates * 45) * 0.5 + "px",
			"float" : "left",
			"display" : "inline-block",
			"cursor" : "pointer",
			"text-align" : "center",
			"border-radius" : "5px",
			"margin-right" : "3px",
			"margin-bottom" : "5%",
			"border" : "1px solid " + colors.color1,
			"box-shadow" : "0.25px 0.25px 2px 0.25px " + colors.color7,
			"position" : "relative",
        },
        "color_input" : {
			"display" : "inline-block",
			"background-color" : "rgba(0,0,0,0)",
			"width" : (variables.sizeRates * 25) + "px",
			"height" : (variables.sizeRates * 40) + "px",
			"font-size" : "0.7em!important",
		    "color": colors.color1,
			"border" : "none",
			"border-radius" : "5px",
			"text-align" : "right",
			"margin-right" : (variables.sizeRates * 8) + "px",
			"margin-left" : (variables.sizeRates * 2) + "px",
			"font-family" : variables.defaultToolFontFamily,
        },
        "color_input:focus" : {
			"outline" : "none",
        },
        "color_input::-webkit-inner-spin-button" : {
			"appearance" : "none",
			"-moz-appearance" : "none",
			"-webkit-appearance" : "none",
        },
        "color_explain" : {
			"display" : "inline-block",
			"height" : (variables.sizeRates * 25) + "px",
			"color": colors.color1,
			"font-family" : variables.defaultToolFontFamily,
			"font-size" : "0.7em",
        },
        "tooltip" : {
			"width" : variables.textareaOriginWidths,
			"max-width" : variables.textareaMaxWidth,
			"margin" : "0 auto",
			"padding" : "2px 0",
			"background-color" : colors.color3,
			"border" : "solid 1px " + colors.color5,
			"height": "0",
			"overflow" : "hidden",
			"opacity" : "0",
			"transition": "opacity 0.6s, height 0.6s",
			"position" : "absolute",
		    "left": "50%",
		    "transform": "translateX(-50%)",
			"z-index" : "100",
			"text-align" : "left",
			"font-family" : variables.defaultToolFontFamily,
			"font-size" : "0.9em",
        },
        "tooltip_button" : {
			"width" : (variables.sizeRates * 50) * 0.7 + "px",
			"height" : (variables.sizeRates * 45) * 0.7 + "px",
			"float" : "left",
			"display" : "inline-block",
			"cursor" : "pointer",
			"text-align" : "center",
			"margin" : "2px 2px",
			"border-radius" : "5px",
			"box-shadow" : "0.25px 0.25px 2px 0.25px " + colors.color7,
			"background-color" : colors.color4,
			"position" : "relative",
        },
        "att_link_tooltip_href" : {
			"cursor" : "pointer",
			"float" : "left",
			"padding" : "0 10px",
			"color" : colors.color11,
			"text-decoration" : "underline",
			"font-size" : "0.9em",
			"line-height" : (variables.sizeRates * 45) * 0.8 + "px",
        },
        "help_main" : {
			"max-height" : variables.textareaOriginHeights,
			"color" : colors.color10,
			"overflow-y" : "auto",
        },
        "placeholder" : {
			"width" : variables.textareaOriginWidths,
			"padding" : "10px",
			"background-color" : getRGBAFromHex(colors.color3, 0.8),
			"color" : colors.color1,
			"display" : "none",
			"position" : "absolute",
			"z-index" : "100",
			"font-family" : variables.defaultToolFontFamily,
        },
        "on_button_on" : {
			"background-color" : colors.color5 + "!important",
			"box-shadow" : "0.25px 0.25px 0.25px 0.25px " + colors.color7,
        },
        "on_active" : {
			"background-color" : colors.color5 + "!important",
			"box-shadow" : "0.25px 0.25px 0.25px 0.25px " + colors.color7,
        },
        "on_mouseover" : {
			"background-color" : colors.color5 + "!important",
        },
        "on_mouseout" : {
			"background-color" : colors.color4 + "!important",
        },
        "on_display_inline" : {
			"display":"inline"
        },
        "on_display_inline_block" : {
			"display":"inline-block"
        },
        "on_display_block" : {
			"display":"block"
        },
        "on_display_none" : {
			"display":"none"
        },
    };
    return csses
}
