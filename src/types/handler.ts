import { Consts } from "./consts";
import { Vanillanote, VanillanoteElement } from "./vanillanote";

export interface Handler {
    //createElement.ts
    setAttTempFileValid(note: VanillanoteElement): void;
    setAttFileUploadDiv(note: VanillanoteElement): void;
    setAttTempImageValid(note: VanillanoteElement): void;
    setAttImageUploadAndView(note: VanillanoteElement): void;
    createElement(elementTag: string, note: VanillanoteElement, id: string, className: string, appendNodeSetObject?: any): HTMLElement;
    createElementBasic(elementTag: string, note: VanillanoteElement, id: string, className: string, appendNodeSetObject?: any): HTMLElement;
    createElementButton(elementTag: string, note: VanillanoteElement, id: string, className: string, appendNodeSetObject?: any): HTMLElement;
    createElementSelect(elementTag: string, note: VanillanoteElement, id: string, className: string, appendNodeSetObject?: any): HTMLElement;
    createElementInput(note: VanillanoteElement, id: string, className: string,): HTMLInputElement;
    createElementInputCheckbox(note: VanillanoteElement, id: string, className: string): HTMLInputElement;
    createElementInputRadio(note: VanillanoteElement, id: string, className: string, name: string): HTMLInputElement;
    createElementRadioLabel(note: VanillanoteElement, forId: string, iconName: string): HTMLLabelElement;
    createElementFontFamiliySelect(elementTag: string, note: VanillanoteElement, id: string, className: string, appendNodeSetObject?: any): HTMLElement;
    addClickEvent(element: HTMLElement, id: string, note: VanillanoteElement,): void;
    addMouseoverEvent(element: any, note: VanillanoteElement): void;
    addMouseoutEvent(element: any, note: VanillanoteElement): void;
    addTouchstartEvent(element: any, note: VanillanoteElement): void;
    addTouchendEvent(element: any, note: VanillanoteElement): void;
    //handleActive.ts
    onEventDisable(vn: Vanillanote, type: string): void;
    replaceDifferentBetweenElements(vn: Vanillanote, oldEl: any, newEl: any): void;
    compareAttributesBetweenEl(el1: any, el2: any): boolean;
    compareStylesBetweenEl(el1: any, el2: any): boolean;
    getAttributesObjectFromElement(element: any): Object;
    getSpecialTag(el: any, note: VanillanoteElement): any;
    getParentUnitTagElemnt(el: any, note: VanillanoteElement): HTMLElement | null;
    getParentTagName(el: any, note: VanillanoteElement): any;
    getObjectEditElementAttributes(el: any, note: VanillanoteElement): any;
    getObjectEditElementCss(el: any, note: VanillanoteElement): any;
    getEditElementTag(note: VanillanoteElement): string;
    getPreviousElementsUntilNotTag(startEl: any, tag: string, consts: Consts): any[];
    getNextElementsUntilNotTag(startEl: any, tag: string, consts: Consts): any[];
    setTagToggle(note: VanillanoteElement, tag: string): void;
    initToggleButtonVariables(note: VanillanoteElement): void;
    isInNote(el: any): boolean;
    getElementReplaceTag(element: any, tag: string): HTMLElement;
    removeDoubleTag(note: VanillanoteElement, element: any): void;
    getElement(text: string, tagName: string, cssText: string, attributes: Record<string, string>, note: VanillanoteElement): HTMLElement;
    setEditNodeAndElement(note: VanillanoteElement, setElement: any, compareElement: any): boolean;
    removeEmptyElment(el: any, note: VanillanoteElement): void;
    editUnitCheck(note: VanillanoteElement): void;
    doEditUnitCheck(note: VanillanoteElement): void;
    connectObserver(vn: Vanillanote): void;
    isElementInParentBounds(parent: any, child: any): boolean;
    validCheckAttLink(note: VanillanoteElement): void;
    validCheckAttVideo(note: VanillanoteElement): void;
    initAttLink(note: VanillanoteElement): void;
    initAttFile(note: VanillanoteElement): void;
    initAttImage(note: VanillanoteElement): void;
    getObjectNoteCss(note: VanillanoteElement): any;
    showAlert(message: string, beforeAlert: ((message: string) => boolean)): void;
    recodeNote(note: VanillanoteElement): void;
    //handleElement.ts
    closeAllTooltip(note: VanillanoteElement): void;
    setVariableButtonTogle(note: VanillanoteElement, cssObject: Record<string, string>): void;
    button_onToggle(target: any, toggle: boolean): void;
    allButtonToggle(note: VanillanoteElement): void;
    selectToggle(target: any, _note?: VanillanoteElement): void;
    closeAllSelectBoxes(note: VanillanoteElement): void;
    fontFamilySelectList_onClick(e: any, _note?: VanillanoteElement): void;
    setEditStyleTag(note: VanillanoteElement): void;
    setElementScroll(parentElement: any, childElement: any, mobileKeyboardExceptHeight: number): void;
    getCheckSelectBoxesOpened(note: VanillanoteElement): boolean;
    closeAllModal(note: VanillanoteElement): void;
    openAttLinkModal(note: VanillanoteElement): void;
    openPlaceholder(note: VanillanoteElement): void;
    closePlaceholder(note: VanillanoteElement): void;
    setAllModalSize(note: VanillanoteElement): void;
    setPlaceholderSize(note: VanillanoteElement): void;
    setAllToolTipPosition(note: VanillanoteElement): void;
    appearAttLinkToolTip(note: VanillanoteElement): void;
    appearAttImageAndVideoTooltip(note: VanillanoteElement): void;
    setImageAndVideoWidth(el: any): void;
    setAllToolSize(note: VanillanoteElement): void;
    doDecreaseTextareaHeight(note: VanillanoteElement): void;
    doIncreaseTextareaHeight(vn: Vanillanote): void;
    modifyTextareaScroll(textarea: any, note: VanillanoteElement): void;
    initTextarea(textarea: HTMLElement): void;
    //handleSelection.ts
    setNewSelection(startNode: Node, startOffset: number, endNode: Node, endOffset: number): any;
    handleSpecialTagSelection(note: VanillanoteElement): void;
    setOriginEditSelection(note: VanillanoteElement): void;
    setEditSelection(note: VanillanoteElement, selection: Selection): boolean;
    isValidSelection(note: VanillanoteElement): boolean;
    modifySeletedElements(note: VanillanoteElement): any[];
    modifySelectedUnitElementTag(target: any, _note?: VanillanoteElement): void;
    modifySelectedUnitElementStyle(target: any, _note?: VanillanoteElement): void;
    modifySelectedSingleElement(note: VanillanoteElement, csses: Record<string, string> | null, tagName?: string, attributes?: Record<string, string>): void;
    textarea_onBeforeinputSpelling(e: any): void;
    textarea_onKeydownEnter(target: any): void;
}
